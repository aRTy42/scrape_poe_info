#! python3
"""
# scrape_poe_gems.py - scrapes poe gems from the wiki using the API.
"""

import requests, re, datetime, time, json, os

SCRIPTDIR = os.path.dirname(os.path.abspath(__file__))

# Regex magic! I recommend using https://regex101.com to make it more readable.

regex_single_value = re.compile(r'\+?([\d\.]+)(%?)')
"""
matches the number before the % value such as:
	0.5%
	1%
	+0.5%
"""

def clean_up_api_results(api_results):
	"""
	Takes the API result and turns it into a list of json objects.
	At this stage the mods are still in the original wiki format.
	Multilines are separated by '<br>'.	
	"""
	
	#gem_names = list(api_results.keys())
	#gem_names.sort()
	partial_gem_list = []
	for result in api_results:
		itemdata = result['title']
		obj = {}
		obj['name'] = itemdata['name']
		obj['qtext'] = itemdata['quality stat text']
		partial_gem_list.append(obj)
	
	return partial_gem_list
	
	
def get_api_results():
	"""
	This function gets the wiki data, it uses the wiki's API and requests json format.
	See this HTML version to get a better idea how the API response is structured:
	https://pathofexile.gamepedia.com/api.php?action=cargoquery&format=json&limit=500&tables=skill&fields=_pageName=name%2Cquality_stat_text&where=_pageName%20NOT%20LIKE%20%27Skill:%%27&formatversion=1
	"""
	
	print('Getting data for gems')
	r = requests.get('https://pathofexile.gamepedia.com/api.php?action=cargoquery&format=json&limit=500&tables=skill&fields=_pageName=name%2Cquality_stat_text&where=_pageName%20NOT%20LIKE%20%27Skill:%%27&formatversion=1')
	rj = r.json()
	api_results = rj['cargoquery']
	
	return clean_up_api_results(api_results)


def get_wiki_data():
	gem_list = []
	#for category in gem_categories:
	#	gem_list.extend(get_api_results(category))
	
	gem_list.extend(get_api_results())
	
	print('')
	return gem_list


def	separate_num(text_line):
	"""
	Takes a quality text line and modifies it to match the desired format for 
	the PoE ItemInfo Script's "GemQualityList.txt" file.
	"""
	
	text_parts = []
	num_parts = []
	
	mod_list = text_line.split('&lt;br&gt;')
	for mod in mod_list:
		num_match = regex_single_value.search(mod)
		if num_match is not None:
			num_part = num_match.group(1)
			if num_match.group(2) is not None:
				perc = num_match.group(2)
			else:
				perc = ''
			
			text_part = mod.replace(num_part, str(int(20*float(num_part))))
			text_part = re.sub(r'^Supported Skills (have|deal) | from Supported Skills$', '', text_part)
			
			if not num_parts:
				num_parts.append(num_part)
			elif num_parts[0] != num_part:
				num_parts.append(num_part)
			
			text_parts.append(text_part)
			
			new_text_line = '`n '.join(text_parts) + '`n ' + '(' + (perc + ' / ').join(num_parts) + perc + ' per 1% Q)'
		
		else:
			new_text_line = ''
	
	return new_text_line


def	convert_to_AHK_script_format(gem_list):
	"""
	Takes a list of json objects, holding the item informations.
	Parses items one by one and creates a list with text lines in the format
	for the PoE ItemInfo Script's "GemQualityList.txt" file.
	"""
	
	new_data = []
	
	for item in gem_list:
		q_text = separate_num(item['qtext'])
		name = item['name'].split(' (')[0]
		entry = 'gemQualityList["' + name + '"] := " ' + q_text + '"'
		new_data.append(entry)
		if not q_text:
			print("Parsing error for: " + item['name'])
	
	return new_data


def define_file_header():
	"""
	info header for GemQualityList.txt

	:return: list
	"""
	data = []
	d = datetime.datetime.now()
	now_time = d.strftime('%Y-%m-%d at %H:%M:%S')
	data.append('; Data from https://pathofexile.gamepedia.com/Path_of_Exile_Wiki using the API.')
	data.append('; Comments can be made with ";", blank lines will be ignored.')
	data.append(';')
	data.append('; This file was auto-generated by scrape_poe_gems.py on {}'.format(now_time) + '\n')
	data.append('gemQualityList := Object()')
	data.append('gemQualityList["Unknown Gem"] := "No gem quality information found."\n')

	return data


def write_list_to_lines(new_data):
	file = open(SCRIPTDIR + '\\GemQualityList.txt', 'a+b')  # opens file for writing
	for row in new_data:
		file.write(row.encode('cp1252'))
		file.write(b'\n')
	file.close()


def main():
	# gem_categories = ['Support Skill Gems','Active Skill Gems']
	open(SCRIPTDIR + '\\GemQualityList.txt', 'w').close()  # create file (or overwrite it if it exists)
	write_list_to_lines(define_file_header())
	gem_list = get_wiki_data()
	new_data = convert_to_AHK_script_format(gem_list)
	write_list_to_lines(new_data)
	

startTime = datetime.datetime.now()
main()
print('\nProgram execution time: ',(datetime.datetime.now() - startTime))
